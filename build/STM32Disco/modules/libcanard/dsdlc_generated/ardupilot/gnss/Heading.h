/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/alex/ArduPilot/ardupilot/libraries/AP_UAVCAN/dsdl/ardupilot/gnss/20002.Heading.uavcan
 */

#ifndef __ARDUPILOT_GNSS_HEADING
#define __ARDUPILOT_GNSS_HEADING

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
bool heading_valid
bool heading_accuracy_valid

float16 heading_rad
float16 heading_accuracy_rad
******************************************************************************/

/********************* DSDL signature source definition ***********************
ardupilot.gnss.Heading
saturated bool heading_valid
saturated bool heading_accuracy_valid
saturated float16 heading_rad
saturated float16 heading_accuracy_rad
******************************************************************************/

#define ARDUPILOT_GNSS_HEADING_ID                          20002
#define ARDUPILOT_GNSS_HEADING_NAME                        "ardupilot.gnss.Heading"
#define ARDUPILOT_GNSS_HEADING_SIGNATURE                   (0x315CAE39ECED3412ULL)

#define ARDUPILOT_GNSS_HEADING_MAX_SIZE                    ((34 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    bool       heading_valid;                 // bit len 1
    bool       heading_accuracy_valid;        // bit len 1
    float      heading_rad;                   // float16 Saturate
    float      heading_accuracy_rad;          // float16 Saturate

} ardupilot_gnss_Heading;

static inline
uint32_t ardupilot_gnss_Heading_encode(ardupilot_gnss_Heading* source, void* msg_buf);

static inline
int32_t ardupilot_gnss_Heading_decode(const CanardRxTransfer* transfer, uint16_t payload_len, ardupilot_gnss_Heading* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t ardupilot_gnss_Heading_encode_internal(ardupilot_gnss_Heading* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t ardupilot_gnss_Heading_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, ardupilot_gnss_Heading* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/alex/ArduPilot/ardupilot/libraries/AP_UAVCAN/dsdl/ardupilot/gnss/20002.Heading.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) >= max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief ardupilot_gnss_Heading_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t ardupilot_gnss_Heading_encode_internal(ardupilot_gnss_Heading* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    source->heading_valid = CANARD_INTERNAL_SATURATE_UNSIGNED(source->heading_valid, 1)
    canardEncodeScalar(msg_buf, offset, 1, (void*)&source->heading_valid); // 1
    offset += 1;

    source->heading_accuracy_valid = CANARD_INTERNAL_SATURATE_UNSIGNED(source->heading_accuracy_valid, 1)
    canardEncodeScalar(msg_buf, offset, 1, (void*)&source->heading_accuracy_valid); // 1
    offset += 1;

    // float16 special handling
#ifndef CANARD_USE_FLOAT16_CAST
    tmp_float = canardConvertNativeFloatToFloat16(source->heading_rad);
#else
    tmp_float = (CANARD_USE_FLOAT16_CAST)source->heading_rad;
#endif
    canardEncodeScalar(msg_buf, offset, 16, (void*)&tmp_float); // 32767
    offset += 16;

    // float16 special handling
#ifndef CANARD_USE_FLOAT16_CAST
    tmp_float = canardConvertNativeFloatToFloat16(source->heading_accuracy_rad);
#else
    tmp_float = (CANARD_USE_FLOAT16_CAST)source->heading_accuracy_rad;
#endif
    canardEncodeScalar(msg_buf, offset, 16, (void*)&tmp_float); // 32767
    offset += 16;

    return offset;
}

/**
  * @brief ardupilot_gnss_Heading_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t ardupilot_gnss_Heading_encode(ardupilot_gnss_Heading* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = ardupilot_gnss_Heading_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief ardupilot_gnss_Heading_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     ardupilot_gnss_Heading dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t ardupilot_gnss_Heading_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  ardupilot_gnss_Heading* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 1, false, (void*)&dest->heading_valid);
    if (ret != 1)
    {
        goto ardupilot_gnss_Heading_error_exit;
    }
    offset += 1;

    ret = canardDecodeScalar(transfer, (uint32_t)offset, 1, false, (void*)&dest->heading_accuracy_valid);
    if (ret != 1)
    {
        goto ardupilot_gnss_Heading_error_exit;
    }
    offset += 1;

    // float16 special handling
    ret = canardDecodeScalar(transfer, (uint32_t)offset, 16, false, (void*)&tmp_float);

    if (ret != 16)
    {
        goto ardupilot_gnss_Heading_error_exit;
    }
#ifndef CANARD_USE_FLOAT16_CAST
    dest->heading_rad = canardConvertFloat16ToNativeFloat(tmp_float);
#else
    dest->heading_rad = (float)tmp_float;
#endif
    offset += 16;

    // float16 special handling
    ret = canardDecodeScalar(transfer, (uint32_t)offset, 16, false, (void*)&tmp_float);

    if (ret != 16)
    {
        goto ardupilot_gnss_Heading_error_exit;
    }
#ifndef CANARD_USE_FLOAT16_CAST
    dest->heading_accuracy_rad = canardConvertFloat16ToNativeFloat(tmp_float);
#else
    dest->heading_accuracy_rad = (float)tmp_float;
#endif
    offset += 16;
    return offset;

ardupilot_gnss_Heading_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief ardupilot_gnss_Heading_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     ardupilot_gnss_Heading dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t ardupilot_gnss_Heading_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  ardupilot_gnss_Heading* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(ardupilot_gnss_Heading); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = ardupilot_gnss_Heading_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __ARDUPILOT_GNSS_HEADING